from flask import Flask, request, jsonify
import MetaTrader5 as mt5

# === Initialize Flask App ===
app = Flask(__name__)

# === Initialize MT5 ===
if not mt5.initialize():
    print("MT5 initialization failed:", mt5.last_error())
    quit()

# === Config ===
SYMBOL = "USOILm"             # Ensure this matches your MT5 symbol exactly
LOT_SIZE = 0.03              # Fixed lot size
TP_PIPS = 2.8
SL_PIPS = 6
PIP_VALUE = 0.01             # 1 pip = 0.01 for USOIL
TP_OFFSET = TP_PIPS * PIP_VALUE  # 30 pips = 0.3
SL_OFFSET = SL_PIPS * PIP_VALUE

def close_opposite_trade(direction, symbol):
    # Get all open positions for the symbol
    positions = mt5.positions_get(symbol=symbol)
    if positions is None:
        print("Failed to retrieve open positions")
        return

    for pos in positions:
        if (direction == 'buy' and pos.type == mt5.POSITION_TYPE_SELL) or \
           (direction == 'sell' and pos.type == mt5.POSITION_TYPE_BUY):

            # Prepare opposite close order
            close_type = mt5.ORDER_TYPE_BUY if pos.type == mt5.POSITION_TYPE_SELL else mt5.ORDER_TYPE_SELL
            close_price = mt5.symbol_info_tick(symbol).ask if close_type == mt5.ORDER_TYPE_BUY else mt5.symbol_info_tick(symbol).bid

            close_request = {
                "action": mt5.TRADE_ACTION_DEAL,
                "symbol": symbol,
                "volume": pos.volume,
                "type": close_type,
                "position": pos.ticket,
                "price": close_price,
                "deviation": 10,
                "magic": 123456,
                "comment": "Auto-close opposite position",
                "type_time": mt5.ORDER_TIME_GTC,
                "type_filling": mt5.ORDER_FILLING_IOC,
            }

            result = mt5.order_send(close_request)
            print(f"[CLOSE] Closed opposite trade: ticket={pos.ticket}, result={result.retcode}")

@app.route('/', methods=['POST'])
def webhook():
    print("[DEBUG] Incoming request:", request.data)  # Add this
    data = request.json

    if not data or 'direction' not in data:
        return jsonify({"error": "Missing 'direction' in alert"}), 400


    direction = data['direction'].lower()
    # === Close any open trade in the opposite direction ===
    close_opposite_trade(direction, SYMBOL)

    if direction not in ['buy', 'sell']:
        return jsonify({"error": "Invalid direction (must be 'buy' or 'sell')"}), 400

    if not mt5.symbol_select(SYMBOL, True):
        return jsonify({"error": f"Symbol {SYMBOL} not found"}), 500

    # === Get current price ===
    tick = mt5.symbol_info_tick(SYMBOL)
    if tick is None:
        return jsonify({"error": "Failed to get tick data"}), 500

    price = tick.ask if direction == 'buy' else tick.bid
    tp = round(price + TP_OFFSET, 3) if direction == 'buy' else round(price - TP_OFFSET, 3)

    # === Get SL from current candle's low/high Â± 0.002 ===
    BUFFER = 0.002

    rates = mt5.copy_rates_from_pos(SYMBOL, mt5.TIMEFRAME_M1, 1, 1)  # 1 = previous candle

    if rates is None or len(rates) == 0:
        return jsonify({"error": "Failed to retrieve candle data"}), 500

    current_candle = rates[0]
    sl = round(current_candle['low'] - BUFFER, 3) if direction == 'buy' else round(current_candle['high'] + BUFFER, 3)

    order_type = mt5.ORDER_TYPE_BUY if direction == 'buy' else mt5.ORDER_TYPE_SELL

    # === Build Order Request ===
    request_payload = {
        "action": mt5.TRADE_ACTION_DEAL,
        "symbol": SYMBOL,
        "volume": LOT_SIZE,
        "type": order_type,
        "price": price,
        "tp": tp,
        "sl": sl,
        "deviation": 10,
        "magic": 123456,
        "comment": "TV Webhook AutoTrade",
        "type_time": mt5.ORDER_TIME_GTC,
        "type_filling": mt5.ORDER_FILLING_IOC,
    }

    # === Send Order ===
    result = mt5.order_send(request_payload)



    if result.retcode != mt5.TRADE_RETCODE_DONE:
        return jsonify({
            "status": "fail",
            "retcode": result.retcode,
            "comment": result.comment
        }), 500

    print(f"[TRADE EXECUTED] {direction.upper()} | Entry: {price} | TP: {tp} | SL: {sl}")
    return jsonify({
        "status": "success",
        "direction": direction,
        "entry": price,
        "tp": tp
    }), 200

# === Run Flask Server ===
if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5000)
