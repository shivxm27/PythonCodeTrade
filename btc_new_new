import MetaTrader5 as mt5
import pandas as pd
import numpy as np
import time
from datetime import datetime

# CONFIG
SYMBOL = "BTCUSDm"
TIMEFRAME = mt5.TIMEFRAME_M15
WMA_PERIOD = 5
LOT_SIZE = 0.20
TP_DOLLARS = 10000
SL_DOLLARS = 4000
SLEEP_SECONDS = 5  # check every 5 seconds

def calculate_wma(prices, period):
    if len(prices) < period:
        return None
    weights = np.arange(1, period + 1)
    return np.sum(prices[-period:] * weights) / weights.sum()

def get_latest_bars(symbol, timeframe, count):
    rates = mt5.copy_rates_from_pos(symbol, timeframe, 0, count)
    if rates is None or len(rates) == 0:
        return None
    df = pd.DataFrame(rates)
    df['time'] = pd.to_datetime(df['time'], unit='s')
    return df

def get_tick_prices(symbol):
    tick = mt5.symbol_info_tick(symbol)
    return tick.ask, tick.bid

def close_all_positions(symbol):
    positions = mt5.positions_get(symbol=symbol)
    if positions:
        for pos in positions:
            close_type = mt5.ORDER_TYPE_SELL if pos.type == mt5.POSITION_TYPE_BUY else mt5.ORDER_TYPE_BUY
            price = mt5.symbol_info_tick(symbol).bid if close_type == mt5.ORDER_TYPE_SELL else mt5.symbol_info_tick(symbol).ask
            request = {
                "action": mt5.TRADE_ACTION_DEAL,
                "position": pos.ticket,
                "symbol": symbol,
                "volume": pos.volume,
                "type": close_type,
                "price": price,
                "deviation": 10,
                "magic": 234000,
                "comment": "Closing position",
                "type_filling": mt5.ORDER_FILLING_IOC,
            }
            result = mt5.order_send(request)
            if result.retcode != mt5.TRADE_RETCODE_DONE:
                print(f"Failed to close position #{pos.ticket}: {result.comment}")
            else:
                print(f"Closed position #{pos.ticket}")

def open_position(symbol, order_type, volume, price, sl, tp):
    request = {
        "action": mt5.TRADE_ACTION_DEAL,
        "symbol": symbol,
        "volume": volume,
        "type": order_type,
        "price": price,
        "sl": sl,
        "tp": tp,
        "deviation": 10,
        "magic": 234000,
        "comment": "WMA Strategy",
        "type_filling": mt5.ORDER_FILLING_IOC,
    }
    result = mt5.order_send(request)
    if result.retcode != mt5.TRADE_RETCODE_DONE:
        print(f"Order failed: {result.comment}")
        return False
    print(f"Order placed: {'BUY' if order_type == mt5.ORDER_TYPE_BUY else 'SELL'}, ticket: {result.order}")
    return True

def main():
    if not mt5.initialize():
        print("MT5 initialization failed")
        return

    symbol_info = mt5.symbol_info(SYMBOL)
    if symbol_info is None:
        print(f"Symbol {SYMBOL} not found")
        mt5.shutdown()
        return

    point = symbol_info.point
    last_candle_time = None

    print("Starting WMA strategy with one-trade-per-candle control...")

    while True:
        df = get_latest_bars(SYMBOL, TIMEFRAME, WMA_PERIOD + 10)
        if df is None:
            print("Failed to get bars, retrying...")
            time.sleep(SLEEP_SECONDS)
            continue

        # Get latest candle info
        current_candle_time = df['time'].iloc[-1]
        closes = df['close'].values
        wma = calculate_wma(closes, WMA_PERIOD)
        if wma is None:
            print("Not enough data to calculate WMA")
            time.sleep(SLEEP_SECONDS)
            continue

        current_close = closes[-1]
        previous_close = closes[-2]
        current_ask, current_bid = get_tick_prices(SYMBOL)

        close_cross_up = (previous_close <= wma) and (current_close > wma)
        close_cross_down = (previous_close >= wma) and (current_close < wma)
        ask_above_wma = current_ask > wma
        bid_below_wma = current_bid < wma

        positions = mt5.positions_get(symbol=SYMBOL)
        has_position = positions is not None and len(positions) > 0

        buy_signal = close_cross_up and ask_above_wma
        sell_signal = close_cross_down and bid_below_wma

        # Skip if still in same candle as last trade
        if last_candle_time == current_candle_time:
            print(f"{datetime.now()} - Skipping duplicate check in same candle: {current_candle_time}")
            time.sleep(SLEEP_SECONDS)
            continue

        if buy_signal:
            if has_position:
                for pos in positions:
                    if pos.type == mt5.POSITION_TYPE_SELL:
                        print("Closing SELL due to BUY signal")
                        close_all_positions(SYMBOL)
                        has_position = False
            if not has_position:
                sl = current_ask - SL_DOLLARS * point
                tp = current_ask + TP_DOLLARS * point
                print(f"{datetime.now()} - BUY @ {current_ask:.2f}, SL: {sl:.2f}, TP: {tp:.2f}")
                if open_position(SYMBOL, mt5.ORDER_TYPE_BUY, LOT_SIZE, current_ask, sl, tp):
                    last_candle_time = current_candle_time

        elif sell_signal:
            if has_position:
                for pos in positions:
                    if pos.type == mt5.POSITION_TYPE_BUY:
                        print("Closing BUY due to SELL signal")
                        close_all_positions(SYMBOL)
                        has_position = False
            if not has_position:
                sl = current_bid + SL_DOLLARS * point
                tp = current_bid - TP_DOLLARS * point
                print(f"{datetime.now()} - SELL @ {current_bid:.2f}, SL: {sl:.2f}, TP: {tp:.2f}")
                if open_position(SYMBOL, mt5.ORDER_TYPE_SELL, LOT_SIZE, current_bid, sl, tp):
                    last_candle_time = current_candle_time

        else:
            print(f"{datetime.now()} - No signal | Close: {current_close:.2f}, Ask: {current_ask:.2f}, Bid: {current_bid:.2f}, WMA: {wma:.2f}")

        time.sleep(SLEEP_SECONDS)

    mt5.shutdown()

if __name__ == "__main__":
    main()
